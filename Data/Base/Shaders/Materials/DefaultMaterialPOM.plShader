[PLATFORMS]
ALL

[PERMUTATIONS]

BLEND_MODE
RENDER_PASS
SHADING_MODE
TWO_SIDED
FLIP_WINDING
FORWARD_PASS_WRITE_DEPTH
MSAA
CAMERA_MODE
SHADING_QUALITY
VERTEX_SKINNING
VERTEX_SHADER_RENDER_TARGET_ARRAY_INDEX
GAMEOBJECT_VELOCITY

[MATERIALPARAMETER]

Permutation BLEND_MODE;
Permutation SHADING_MODE;
Permutation TWO_SIDED;

float2 Scale @Default(float2(1.0,1.0));

bool UseDisplacementTexture @Group("Displacement");
bool UseDisplacementStochasticTexturing;
Texture2D DisplacementTexture;
float HeightScale @Default(0.0) @Clamp(0.0, 1.0);
float MaxSlices @Default(64.0) @Clamp(0.0, 512.0);

Color BaseColor @Default(Color(1.0, 1.0, 1.0)) @Group("Color");
bool UseBaseTexture;
bool UseBaseStochasticTexturing;
Texture2D BaseTexture;

float MaskThreshold @Default(0.25);

bool UseNormalTexture @Group("Normal");
bool UseNormalStochasticTexturing;
Texture2D NormalTexture;

bool InvertOcclusion @Group("Occlusion");
bool UseOcclusionTexture;
bool UseOcclusionStochasticTexturing;
Texture2D OcclusionTexture;

float RoughnessValue @Default(0.7) @Clamp(0.0, 2.0) @Group("Roughness");
bool UseRoughnessTexture;
bool UseRoughnessStochasticTexturing;
Texture2D RoughnessTexture;

float MetallicValue @Default(0.0) @Clamp(0.0, 2.0) @Group("Metallic");
bool UseMetallicTexture;
bool UseMetallicStochasticTexturing;
Texture2D MetallicTexture;

bool UseRMATexture @Group("Orm/RMA");
bool UseORMTexture;
bool UseOrmStochasticTexturing;
Texture2D OrmTexture;

Color EmissiveColor @Default(Color(0.0, 0.0, 0.0)) @Group("Emissive");
bool UseEmissiveTexture;
bool UseEmissiveStochasticTexturing;
Texture2D EmissiveTexture;

[MATERIALCONFIG]

#include <Shaders/Materials/MaterialConfig.h>

[RENDERSTATE]

#include <Shaders/Materials/MaterialState.h>

[VERTEXSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0

#if GAMEOBJECT_VELOCITY
  #define USE_VELOCITY
#endif

#if VERTEX_SKINNING
  #define USE_SKINNING
#endif

#if RENDER_PASS == RENDER_PASS_EDITOR
  #define USE_DEBUG_INTERPOLATOR
#endif

#include <Shaders/Materials/DefaultMaterialCB.h>
#include <Shaders/Materials/MaterialVertexShader.h>

VS_OUT main(VS_IN Input)
{
  return FillVertexData(Input);
}


[GEOMETRYSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0

#if GAMEOBJECT_VELOCITY
  #define USE_VELOCITY
#endif

#if VERTEX_SKINNING
  #define USE_SKINNING
#endif

#if RENDER_PASS == RENDER_PASS_EDITOR
  #define USE_DEBUG_INTERPOLATOR
#endif

#include <Shaders/Materials/MaterialStereoGeometryShader.h>


[PIXELSHADER]

#define USE_NORMAL
#define USE_TANGENT
#define USE_TEXCOORD0
#define USE_SIMPLE_MATERIAL_MODEL
#define USE_MATERIAL_EMISSIVE
#define USE_MATERIAL_OCCLUSION
#define USE_TWO_SIDED_LIGHTING
#define USE_DECALS
#define USE_FOG
#define USE_WEATHER

#if GAMEOBJECT_VELOCITY
  #define USE_VELOCITY
#endif

#if RENDER_PASS == RENDER_PASS_EDITOR
  #define USE_DEBUG_INTERPOLATOR
#endif

#include <Shaders/Materials/DefaultMaterialCB.h>


#define CUSTOM_GLOBALS
#include <Shaders/Materials/MaterialPixelShader.h>

Texture2D BaseTexture;
SamplerState BaseTexture_AutoSampler;

Texture2D NormalTexture;
SamplerState NormalTexture_AutoSampler;

Texture2D MetallicTexture;
SamplerState MetallicTexture_AutoSampler;

Texture2D RoughnessTexture;
SamplerState RoughnessTexture_AutoSampler;

Texture2D EmissiveTexture;
SamplerState EmissiveTexture_AutoSampler;

Texture2D OcclusionTexture;
SamplerState OcclusionTexture_AutoSampler;

Texture2D OrmTexture;
SamplerState OrmTexture_AutoSampler;

Texture2D DisplacementTexture;
SamplerState DisplacementTexture_AutoSampler;

// Based on the following implementation:
// https://learnopengl.com/Advanced-Lighting/Parallax-Mapping
float2 ComputeParallaxMapping(in float2 uv, in float3 viewDirection, in float scale)
{
  static const float minLayers = 08.0f;

  float3x3 TBN       = float3x3(G.Input.Tangent, G.Input.BiTangent, G.Input.Normal);
  float3x3 toTangent = transpose(TBN);
  viewDirection      = mul(viewDirection, toTangent);
  scale             /= 10.0f;
  scale             *= -1.0f;

  // Number of depth layers
  float numLayers = lerp(MaxSlices, minLayers, abs(dot(float3(0.0f, 0.0f, 1.0f), viewDirection)));
  // Calculate the size of each layer
  float layerDepth = 1.0f / numLayers;
  // Depth of current layer
  float currentLayerDepth = 0.0f;

  // The amount to shift the texture coordinates per layer (from vector P)
  float2 P = viewDirection.xy / viewDirection.z * scale;
  float2 deltaTexCoords = P / numLayers;

  // Get initial values
  float2 currentTexCoords     = uv;
  float2 deriv_x              = ddx_coarse(currentTexCoords);
  float2 deriv_y              = ddy_coarse(currentTexCoords);
  float  currentDepthMapValue = DisplacementTexture.SampleGrad(DisplacementTexture_AutoSampler, currentTexCoords, deriv_x, deriv_y).r;

  int steps = 0;

  [loop]
  while (currentLayerDepth < currentDepthMapValue && steps < MaxSlices)
  {
    // Shift texture coordinates along direction of P
    currentTexCoords -= deltaTexCoords;

    // Get depthmap value at current texture coordinates
    currentDepthMapValue = DisplacementTexture.SampleGrad(DisplacementTexture_AutoSampler, currentTexCoords, deriv_x, deriv_y).r;

    // Get depth of next layer
    currentLayerDepth += layerDepth;

    steps++;
  }

  // Get texture coordinates before collision (reverse operations)
  float2 prevTexCoords = currentTexCoords + deltaTexCoords;

  // Get depth after and before collision for linear interpolation
  float afterDepth  = currentDepthMapValue - currentLayerDepth;
  float beforeDepth = DisplacementTexture.SampleGrad(DisplacementTexture_AutoSampler, prevTexCoords, deriv_x, deriv_y).r - currentLayerDepth + layerDepth;

  // Interpolation of texture coordinates
  float weight = afterDepth / (afterDepth - beforeDepth);
  float2 finalTexCoords = prevTexCoords * weight + currentTexCoords * (1.0f - weight);

  return finalTexCoords;
}

void FillCustomGlobals()
{
  [branch]
  if (UseDisplacementTexture)
  {
    float3 direction = normalize(GetCameraPosition() - G.Input.WorldPosition.xyz);
    G.Input.TexCoord0 = ComputeParallaxMapping(G.Input.TexCoord0, direction, HeightScale / 10);
  }
}

float3 GetNormal()
{
  [branch]
  if (UseNormalTexture)
  {
    float3 normalTS = DecodeNormalTexture(Sample(NormalTexture, NormalTexture_AutoSampler, G.Input.TexCoord0.xy * Scale, UseNormalStochasticTexturing));
    return TangentToWorldSpace(normalTS);
  }
  else
  {
    return G.Input.Normal;
  }
}

float3 GetBaseColor()
{
  float3 baseColor = BaseColor.rgb * GetInstanceData().Color.rgb;

  // note that the default material actually doesn't support per-vertex colors
#if defined(USE_COLOR0)
  baseColor *= G.Input.Color0;
#endif

  [branch]
  if (UseBaseTexture)
  {
    baseColor *= Sample(BaseTexture, BaseTexture_AutoSampler, G.Input.TexCoord0.xy * Scale, UseBaseStochasticTexturing).rgb;
  }

  return baseColor;
}

float GetMetallic()
{
  [branch]
  if (UseRMATexture)
  {
    return MetallicValue * Sample(OrmTexture, OrmTexture_AutoSampler, G.Input.TexCoord0.xy * Scale, UseOrmStochasticTexturing).g;
  }
  else if (UseORMTexture)
  {
    return MetallicValue * Sample(OrmTexture, OrmTexture_AutoSampler, G.Input.TexCoord0.xy * Scale, UseOrmStochasticTexturing).b;
  }
  else if (UseMetallicTexture)
  {
    return MetallicValue * Sample(MetallicTexture, MetallicTexture_AutoSampler, G.Input.TexCoord0.xy * Scale, UseMetallicStochasticTexturing).r;
  }
  else
  {
    return MetallicValue;
  }
}

float GetReflectance()
{
  return 0.5f;
}

float GetRoughness()
{
  [branch]
  if (UseRMATexture)
  {
    return RoughnessValue * Sample(OrmTexture, OrmTexture_AutoSampler, G.Input.TexCoord0.xy * Scale, UseOrmStochasticTexturing).r;
  }
  else if (UseORMTexture)
  {
    return RoughnessValue * Sample(OrmTexture, OrmTexture_AutoSampler, G.Input.TexCoord0.xy * Scale, UseOrmStochasticTexturing).g;
  }
  else if (UseRoughnessTexture)
  {
    return RoughnessValue * Sample(RoughnessTexture, RoughnessTexture_AutoSampler, G.Input.TexCoord0.xy * Scale, UseRoughnessStochasticTexturing).r;
  }
  else
  {
    return RoughnessValue;
  }
}

float GetOpacity()
{
  float opacity = BaseColor.a * GetInstanceData().Color.a;

  [branch]
  if (UseBaseTexture)
  {
    opacity *= Sample(BaseTexture, BaseTexture_AutoSampler, G.Input.TexCoord0.xy * Scale, UseBaseStochasticTexturing).a;
  }

  #if BLEND_MODE == BLEND_MODE_MASKED
    return opacity - MaskThreshold;
  #else
    return opacity;
  #endif
}

float3 GetEmissiveColor()
{
  [branch]
  if (UseEmissiveTexture)
  {
    return Sample(EmissiveTexture, EmissiveTexture_AutoSampler, G.Input.TexCoord0.xy * Scale, UseEmissiveStochasticTexturing).rgb * EmissiveColor.rgb;
  }
  else
  {
    return EmissiveColor.rgb;
  }
}

float GetOcclusion()
{
  float occlusion = 1.0;
  [branch]
  if (UseRMATexture)
  {
    occlusion =  OrmTexture.Sample(OrmTexture_AutoSampler, G.Input.TexCoord0.xy * Scale).b;
  }
  else if (UseORMTexture)
  {
    occlusion = OrmTexture.Sample(OrmTexture_AutoSampler, G.Input.TexCoord0.xy * Scale).r;
  }
  else if (UseOcclusionTexture)
  {
    occlusion = OcclusionTexture.Sample(OcclusionTexture_AutoSampler, G.Input.TexCoord0.xy * Scale).r;
  }
  else
  {
    return 1.0f;
  }

  if(InvertOcclusion)
  {
    occlusion = 1.0 - occlusion;
  }

  return occlusion;
}
