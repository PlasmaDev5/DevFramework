[PLATFORMS]
ALL

[PERMUTATIONS]

BLOOM_PASS_MODE

[COMPUTESHADER]

#include <Shaders/Common/Common.h>
#include <Shaders/Common/Platforms.h>
#include <Shaders/Common/GlobalConstants.h>

#include "AmdSPDConstants.h"

#define A_GPU
#define A_HLSL
#define SPD_NO_WAVE_OPERATIONS
#define SPD_LINEAR_SAMPLER

#include <Shaders/ThirdParty/FFX/ffx_a.h>

groupshared AF4 spd_intermediate[16][16];
groupshared AU1 spd_counter;

Texture2D ColorTexture;

globallycoherent RWStructuredBuffer<uint> AtomicCounter;
globallycoherent RWTexture2D<float4> DownsampleOutput[12];

AF4 SpdLoadSourceImage(ASU2 p, AU1 slice)
{
  float2 uv = (p + 0.5f) / ViewportSize.xy;
  return ColorTexture.SampleLevel(LinearClampSampler, uv, 0);
}

// Load from mip 5
AF4 SpdLoad(ASU2 pos, AU1 slice)
{
  return DownsampleOutput[5][pos];
}

void SpdStore(ASU2 pos, AF4 value, AU1 index, AU1 slice)
{
  DownsampleOutput[index][pos] = value;
}

AF4 SpdLoadIntermediate(AU1 x, AU1 y)
{
  return spd_intermediate[x][y];
}

void SpdStoreIntermediate(AU1 x, AU1 y, AF4 value)
{
  spd_intermediate[x][y] = value;
}

AF4 SpdReduce4(AF4 s1, AF4 s2, AF4 s3, AF4 s4)
{
  return (s1 + s2 + s3 + s4) * 0.25f;
}

void SpdIncreaseAtomicCounter(AU1 slice)
{
  InterlockedAdd(AtomicCounter[0], 1, spd_counter);
}

AU1 SpdGetAtomicCounter()
{
  return spd_counter;
}

void SpdResetAtomicCounter(AU1 slice)
{
  AtomicCounter[0] = 0;
}

#include <Shaders/ThirdParty/FFX/ffx_spd.h>

[numthreads(256, 1, 1)]
void main(uint3 workGroupId : SV_GroupID, uint localThreadIndex : SV_GroupIndex)
{
  SpdDownsample(workGroupId.xy, localThreadIndex, MipCount, WorkGroupCount, workGroupId.z);
}