[PLATFORMS]
ALL

[PERMUTATIONS]
SHADING_QUALITY = SHADING_QUALITY_NORMAL

[COMPUTESHADER]

#include <Shaders/Common/Common.h>
#include <Shaders/Common/GlobalConstants.h>
#include <Shaders/Common/CameraConstantsAccess.h>
#include <Shaders/Pipeline/PostprocessConstants.h>
#include <Shaders/Pipeline/SSR/SSRConstants.h>
#include <Shaders/Pipeline/SSRAdvanced/SSR.h>

Texture2D<float4> temporalTexture;
Texture2D<float> varianceTexture;
Texture2D<float4> materialTexture;
Texture2D depthTexture;


RWTexture2D<float4> output;

static const float depthThreshold = 10000.0;
static const float normalThreshold = 1.0;
static const float varianceEstimateThreshold = 0.015; // Larger variance values use stronger blur
static const float varianceExitThreshold = 0.005; // Variance needs to be higher than this value to accept blur
static const uint2 bilateralMinMaxRadius = uint2(0, 2); // Chosen by variance

#define BILATERAL_SIGMA 0.9

[numthreads(POSTPROCESS_BLOCKSIZE, POSTPROCESS_BLOCKSIZE, 1)]
void main(uint3 DTid : SV_DispatchThreadID)
{
  const float depth = depthTexture[DTid.xy];
  const float roughness = materialTexture[DTid.xy].a;

  if (!NeedReflection(roughness, depth, RoughnessCutoff))
  {
    output[DTid.xy] = 0;
    return;
  }

  float linearDepth = LinearizeZBufferDepth(depth);

  const float3 N = materialTexture[DTid.xy].xyz;

  const float2 uv = (DTid.xy + 0.5) * resolution.zw;
  float4 outputColor = temporalTexture.SampleLevel(LinearClampSampler, uv, 0);

  float variance = varianceTexture.SampleLevel(LinearClampSampler, uv, 0);
  bool strongBlur = variance > varianceEstimateThreshold;

  float radius = strongBlur ? bilateralMinMaxRadius.y : bilateralMinMaxRadius.x;
  radius = lerp(0.0, radius, saturate(roughness * 8.0)); // roughness 0.125 is destination

  float sigma = radius * BILATERAL_SIGMA;
  int effectiveRadius = min(sigma * 2.0, radius);

  if (variance > varianceExitThreshold && effectiveRadius > 0)
  {
    float3 P = ScreenCoordToWorldSpace(uv, depth);

    float4 result = 0;
    float weightSum = 0.0f;

    for(uint d = 0; d < 2; ++d)
    {
      const int2 direction = d < 1 ? int2(1, 0) : int2(0, 1);
      for (int r = -effectiveRadius; r <= effectiveRadius; r++)
      {
        const int2 sampleCoord = DTid.xy + (direction * r); // Left to right diameter directionally

        if (all(and(sampleCoord >= int2(0, 0), sampleCoord < (int2) resolution.xy)))
        {
          const float sampleDepth = depthTexture[sampleCoord];

          float2 sampleUV = (sampleCoord + 0.5) * resolution.zw;
          const float4 sampleColor = temporalTexture.SampleLevel(LinearClampSampler, sampleUV, 0);

          const float3 sampleN = materialTexture[sampleCoord].xyz;
          const float sampleRoughness = materialTexture[sampleCoord].a;

          float3 sampleP = ScreenCoordToWorldSpace(sampleUV, depth);

          // Don't let invalid roughness samples interfere
          if (NeedReflection(sampleRoughness, sampleDepth, RoughnessCutoff))
          {
            float3 dq = P - sampleP;
            float planeError = max(abs(dot(dq, sampleN)), abs(dot(dq, N)));
            float relativeDepthDifference = planeError / (linearDepth * ClipPlanes.y);
            float bilateralDepthWeight = exp(-sqr(relativeDepthDifference) * depthThreshold);

            float normalError = pow(saturate(dot(sampleN, N)), 4.0);
            float bilateralNormalWeight = saturate(1.0 - (1.0 - normalError) * normalThreshold);

            float bilateralWeight = bilateralDepthWeight * bilateralNormalWeight;

            float gaussian = exp(-sqr(r / sigma));
            float weight = (r == 0) ? 1.0 : gaussian * bilateralWeight; // Skip center gaussian peak

            result += sampleColor * weight;
            weightSum += weight;
          }
        }
      }
    }

    result /= weightSum;
    outputColor = result;
  }

  output[DTid.xy] = outputColor;
}